using System;
using System.Diagnostics;
using System.Reflection;
using System.Text;
using CodeCasing;
using Microsoft.CodeAnalysis;
using Newtonsoft.Json;
using WebIdentifiers.Css.Generating.Models;

namespace WebIdentifiers.Css.Generating
{
    [Generator]
    public class CssGenerator : ISourceGenerator
    {
        public void Execute(GeneratorExecutionContext context)
        {
            LogInfo(context, "Starting CSS source code generation...");
            var references = LoadResources();

            WritePropertiesClass(context, references);

            var valuesWriter = new ClassWriter();
            valuesWriter.AddUsings("WebIdentifiers.Css.Values");

            valuesWriter.AddLine("namespace WebIdentifiers.Css;");
            valuesWriter.AddLine();

            valuesWriter.OpenClass("CssValues", isStatic: true);

            var valuedProperties = references.Where(x => x.Properties is not null).SelectMany(x => x.Properties)
                .Where(x => x.Values is not null);
            var valueNames = valuedProperties
                .SelectMany(x => x.Values)
                .Select(x => x.Name)
                .Where(x => !x.Contains('<') && !x.Contains('|') && !x.StartsWith("[") && !x.EndsWith(")") && !x.StartsWith("/") && !x.Contains('&'))
                .Distinct()
                .OrderBy(x => x);

            foreach (var valueName in valueNames)
            {
                valuesWriter.AddXmlDocSummary($"Gets the name of the <c>{valueName}</c> property.");
                valuesWriter.AddLine($"public const string {valueName.ToPascalCase()} = \"{valueName}\";");
                valuesWriter.AddLine();
            }

            foreach (var propertyName in references.Where(x => x.Properties is not null).SelectMany(x => x.Properties).Select(x => x.Name).Distinct())
            {
                valuesWriter.AddXmlDocSummary($"Gets values which are valid for the <c>{propertyName}</c> property.");
                valuesWriter.AddLine($"public static {propertyName.ToPascalCase()}Values For{propertyName.ToPascalCase()} = new();");
                valuesWriter.AddLine();
            }

            valuesWriter.CloseClass();
            context.AddSource("CssValues.g.cs", valuesWriter.ToString());

            WritePropertySpecificValueClasses(context, references);
        }

        private void LogInfo(GeneratorExecutionContext context, string message)
        {
            var diagnostic = Diagnostic.Create(
                new DiagnosticDescriptor(
                    nameof(CssGenerator),
                    $"Source Generated by {nameof(CssGenerator)}",
                    "Message 1: {0}",
                    "Source Generation",
                    DiagnosticSeverity.Info,
                    true),
                Location.None,
                message);

            context.ReportDiagnostic(diagnostic);
        }

        private IEnumerable<CssReference> LoadResources()
        {
            var results = new List<CssReference>();
            Assembly assembly = Assembly.GetExecutingAssembly(); // Use your assembly or another
            string[] resourceNames = assembly.GetManifestResourceNames();
            foreach (string resourceName in resourceNames)
            {
                using var stream = assembly.GetManifestResourceStream(resourceName);
                using var reader = new StreamReader(stream);
                var serialized = reader.ReadToEnd();
                results.Add(JsonConvert.DeserializeObject<CssReference>(serialized)
                    ?? throw new JsonSerializationException($"Unable to deserialize resource '{resourceName}'."));
            }

            return results;
        }

        private void WritePropertiesClass(GeneratorExecutionContext context, IEnumerable<CssReference> references)
        {
            var propertiesWriter = new ClassWriter();
            propertiesWriter.AddLine("namespace WebIdentifiers.Css;");
            propertiesWriter.AddLine();

            propertiesWriter.OpenClass("CssProperties", isStatic: true);

            var lastProperty = string.Empty;
            foreach (var property in references.Where(x => x.Properties is not null).SelectMany(x => x.Properties).OrderBy(x => x.Name))
            {
                if (!lastProperty.Equals(property.Name, StringComparison.Ordinal))
                {
                    lastProperty = property.Name;
                    propertiesWriter.AddXmlDocSummary($"Gets the name of the <c>{property.Name}</c> property.");
                    propertiesWriter.AddLine($"public const string {property.Name.ToPascalCase()} = \"{property.Name}\";");
                    propertiesWriter.AddLine();
                }
            }

            propertiesWriter.CloseClass();

            context.AddSource("CssProperties.g.cs", propertiesWriter.ToString());
        }

        private void WritePropertySpecificValueClasses(GeneratorExecutionContext context, IEnumerable<CssReference> references)
        {

            var files = new Dictionary<string, int>();
            var propertyGroups = references.Where(x => x.Properties is not null).SelectMany(x => x.Properties).GroupBy(x => x.Name);

            foreach (var property in propertyGroups)
            {
                var values = property.Where(x => x.Values is not null).SelectMany(x => x.Values)
                    ?.Where(x => !x.Name.Contains('<') && !x.Name.Contains('|') && !x.Name.StartsWith("[") && !x.Name.EndsWith(")") && !x.Name.StartsWith("/") && !x.Name.Contains('&'))
                    .OrderBy(x => x.Name)
                    ?? Enumerable.Empty<CssPropertyValue>();

                var writer = new ClassWriter();

                writer.AddLine("namespace WebIdentifiers.Css.Values;");
                writer.AddLine();

                writer.OpenClass($"{property.Key.ToPascalCase()}Values", "PropertyValuesBase");

                if (values.Any())
                {
                    var lastValue = string.Empty;
                    foreach (var value in values)
                    {
                        if (!lastValue.Equals(value.Name, StringComparison.OrdinalIgnoreCase))
                        {
                            lastValue = value.Name;
                            writer.AddXmlDocSummary($"Gets the name of the <c>{value.Name}</c> property. {value.Prose}");
                            writer.AddLine($"public string {value.Name.ToPascalCase()} => CssValues.{value.Name.ToPascalCase()};");
                            writer.AddLine();
                        }

                    }
                }

                writer.CloseClass();

                var fileSuffix = string.Empty;
                var coreFileName = property.Key.ToPascalCase().Trim();
                var fileKey = coreFileName.ToUpper();
                if (files.ContainsKey(fileKey))
                {
                    files[fileKey] = files[fileKey] + 1;
                }
                else
                {
                    files[fileKey] = 1;
                }

                if (files[fileKey] > 1)
                {
                    fileSuffix = files[fileKey].ToString();
                }

                try
                {
                    var fileName = $"Values/{coreFileName}Values{fileSuffix}.g.cs";
                    context.AddSource(fileName, writer.ToString());
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex);
                    throw;
                }

            }
        }

        public void Initialize(GeneratorInitializationContext context)
        {
            // required by ISourceGenerator
        }
    }
}
