using System;
using System.Text;
using CodeCasing;
using Microsoft.CodeAnalysis;
using Newtonsoft.Json;
using WebIdentifiers.Css.Generating.Models;

namespace WebIdentifiers.Css.Generating
{
    [Generator]
    public class CssGenerator : ISourceGenerator
    {
        public void Execute(GeneratorExecutionContext context)
        {
            var properties = JsonConvert.DeserializeObject<List<CssProperty>>(Properties.Resources.Css)
                ?? throw new JsonSerializationException("Unable to deserialize resource.");

            var stringBuilder = new StringBuilder();

            stringBuilder.AppendLine("// <autogenerated/>");
            stringBuilder.AppendLine("namespace WebIdentifiers.Css;");
            stringBuilder.AppendLine("public static class CssProperties");
            stringBuilder.AppendLine("{");

            foreach (var property in properties)
            {
                stringBuilder.AppendLine($"public const string {property.Name.ToPascalCase()} = \"{property.Name}\";") ;
            }

            stringBuilder.AppendLine("}");

            context.AddSource("CssProperties.g.cs", stringBuilder.ToString());
        }

        public void Initialize(GeneratorInitializationContext context)
        {
            // required by ISourceGenerator
        }
    }
}
