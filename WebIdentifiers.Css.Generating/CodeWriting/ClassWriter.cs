using System.Text;

namespace WebIdentifiers.Css.Generating.CodeWriting;

public class ClassWriter
{
    private int indentLevel = 0;
    private StringBuilder stringBuilder = new StringBuilder();

    public ClassWriter(bool enableNullable = true)
    {
        AddLine("// <autogenerated/>");
        AddLine("#nullable " + (enableNullable ? "enable" : "disable"));

        XmlDocs = new XmlDocsWriter(this);
    }

    public XmlDocsWriter XmlDocs { get; }

    public void AddChildLine(string? text)
    {
        AddLine(text, 1);
    }

    public void AddLine(string? text = null, int extraIndentLevels = 0)
    {
        if (!string.IsNullOrWhiteSpace(text))
        {
            OpenLine(extraIndentLevels);
        }

        stringBuilder.AppendLine(text);
    }

    public void AddUsings(params string[] namespaces)
    {
        foreach (var value in namespaces)
        {
            AddLine($"using {value};");
        }

        AddLine();
    }

    public void CloseBlock()
    {
        indentLevel--;
        AddLine("}");
        AddLine();
    }

    public void CloseClass()
    {
        indentLevel--;
        AddLine("}");
    }

    public void OpenBlock()
    {
        AddLine("{");
        indentLevel++;
    }

    public void OpenClass(string className, string? inheritsFrom = null, string accessLevel = "public", bool isStatic = false, bool isPartial = true)
    {
        OpenLine();
        stringBuilder.Append(accessLevel);
        if (isStatic)
        {
            stringBuilder.Append(" static");
        }

        if (isPartial)
        {
            stringBuilder.Append(" partial");
        }

        stringBuilder.Append($" class {className}");

        if (!string.IsNullOrWhiteSpace(inheritsFrom))
        {
            stringBuilder.Append($" : {inheritsFrom}");
        }
        stringBuilder.AppendLine();

        OpenBlock();
    }

    public void OpenLine(int extraIndentLevels = 0)
    {
        for (int i = 0; i < indentLevel + extraIndentLevels; i++)
        {
            stringBuilder.Append("\t");
        }
    }

    public override string ToString()
    {
        return stringBuilder.ToString().TrimEnd();
    }
}