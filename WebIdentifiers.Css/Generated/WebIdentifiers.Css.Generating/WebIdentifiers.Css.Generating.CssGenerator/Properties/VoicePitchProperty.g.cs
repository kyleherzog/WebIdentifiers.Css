// <autogenerated/>
#nullable enable
namespace WebIdentifiers.Css.Properties;

/// <summary>
/// Provides a CSS entry for the VoicePitch property.
/// </summary>
public partial class VoicePitchProperty : CssPropertyEntry
{
	/// <summary>
	/// Represents a voice-pitch CSS property entry.
	/// </summary>
	/// <param name="value">An optional value with which to initialize the CSS property entry.</param>
	public VoicePitchProperty(string? value = null)
		: base(CssPropertyNames.VoicePitch, value)
	{
	}

	/// <summary>
	/// Sets the value of the property entry to <c>absolute</c>. If specified, this keyword indicates that the specified frequency represents an absolute value. If a negative frequency is specified, the computed frequency will be zero.
	/// </summary>
	public VoicePitchProperty SetToAbsolute()
	{
		Value = CssValues.Absolute;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>high</c>. A sequence of monotonically non-decreasing pitch levels that are implementation and voice specific. When the computed value for a given element is only a keyword (i.e. no relative offset is specified), then the corresponding absolute frequency will be re-evaluated on a voice change. Conversely, the application of a relative offset requires the calculation of the resulting frequency based on the current voice at the point at which the relative offset is specified, so the computed frequency will inherit absolutely regardless of any voice change further down the style cascade. Authors should therefore only use keyword values in cases where they wish that voice changes trigger the re-evaluation of the conversion from a keyword to a concrete, voice-dependent frequency.
	/// </summary>
	public VoicePitchProperty SetToHigh()
	{
		Value = CssValues.High;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>low</c>. A sequence of monotonically non-decreasing pitch levels that are implementation and voice specific. When the computed value for a given element is only a keyword (i.e. no relative offset is specified), then the corresponding absolute frequency will be re-evaluated on a voice change. Conversely, the application of a relative offset requires the calculation of the resulting frequency based on the current voice at the point at which the relative offset is specified, so the computed frequency will inherit absolutely regardless of any voice change further down the style cascade. Authors should therefore only use keyword values in cases where they wish that voice changes trigger the re-evaluation of the conversion from a keyword to a concrete, voice-dependent frequency.
	/// </summary>
	public VoicePitchProperty SetToLow()
	{
		Value = CssValues.Low;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>medium</c>. A sequence of monotonically non-decreasing pitch levels that are implementation and voice specific. When the computed value for a given element is only a keyword (i.e. no relative offset is specified), then the corresponding absolute frequency will be re-evaluated on a voice change. Conversely, the application of a relative offset requires the calculation of the resulting frequency based on the current voice at the point at which the relative offset is specified, so the computed frequency will inherit absolutely regardless of any voice change further down the style cascade. Authors should therefore only use keyword values in cases where they wish that voice changes trigger the re-evaluation of the conversion from a keyword to a concrete, voice-dependent frequency.
	/// </summary>
	public VoicePitchProperty SetToMedium()
	{
		Value = CssValues.Medium;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>x-high</c>. A sequence of monotonically non-decreasing pitch levels that are implementation and voice specific. When the computed value for a given element is only a keyword (i.e. no relative offset is specified), then the corresponding absolute frequency will be re-evaluated on a voice change. Conversely, the application of a relative offset requires the calculation of the resulting frequency based on the current voice at the point at which the relative offset is specified, so the computed frequency will inherit absolutely regardless of any voice change further down the style cascade. Authors should therefore only use keyword values in cases where they wish that voice changes trigger the re-evaluation of the conversion from a keyword to a concrete, voice-dependent frequency.
	/// </summary>
	public VoicePitchProperty SetToXHigh()
	{
		Value = CssValues.XHigh;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>x-low</c>. A sequence of monotonically non-decreasing pitch levels that are implementation and voice specific. When the computed value for a given element is only a keyword (i.e. no relative offset is specified), then the corresponding absolute frequency will be re-evaluated on a voice change. Conversely, the application of a relative offset requires the calculation of the resulting frequency based on the current voice at the point at which the relative offset is specified, so the computed frequency will inherit absolutely regardless of any voice change further down the style cascade. Authors should therefore only use keyword values in cases where they wish that voice changes trigger the re-evaluation of the conversion from a keyword to a concrete, voice-dependent frequency.
	/// </summary>
	public VoicePitchProperty SetToXLow()
	{
		Value = CssValues.XLow;
		return this;
	}


}