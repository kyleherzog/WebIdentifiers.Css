// <autogenerated/>
#nullable enable
namespace WebIdentifiers.Css.Properties;

/// <summary>
/// Provides a CSS entry for the Rotate property.
/// </summary>
public partial class RotateProperty : CssPropertyEntry
{
	/// <summary>
	/// Represents a rotate CSS property entry.
	/// </summary>
	/// <param name="value">An optional value with which to initialize the CSS property entry.</param>
	public RotateProperty(string? value = null)
		: base(CssPropertyNames.Rotate, value)
	{
	}

	/// <summary>
	/// Sets the value of the property entry to <c>none</c>. All three properties accept (and default to) the value none, which produces no transform at all. In particular, this value does not trigger the creation of a stacking context or containing block for all descendants, while all other values (including “identity” transforms like translate: 0px) create a stacking context and containing block for all descendants, per usual for transforms.
	/// </summary>
	public RotateProperty SetToNone()
	{
		Value = CssValues.None;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>x</c>. The axis can be specified with either the x, y, or z keywords, which specify a rotation around that axis, equivalent to the rotateX(), rotateY(), and rotateZ() transform functions. Alternately, the axis can be specified explicitly by giving three numbers representing the x, y, and z components of an origin-centered vector, equivalent to the rotate3d() function.
	/// </summary>
	public RotateProperty SetToX()
	{
		Value = CssValues.X;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>y</c>. The axis can be specified with either the x, y, or z keywords, which specify a rotation around that axis, equivalent to the rotateX(), rotateY(), and rotateZ() transform functions. Alternately, the axis can be specified explicitly by giving three numbers representing the x, y, and z components of an origin-centered vector, equivalent to the rotate3d() function.
	/// </summary>
	public RotateProperty SetToY()
	{
		Value = CssValues.Y;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>z</c>. The axis can be specified with either the x, y, or z keywords, which specify a rotation around that axis, equivalent to the rotateX(), rotateY(), and rotateZ() transform functions. Alternately, the axis can be specified explicitly by giving three numbers representing the x, y, and z components of an origin-centered vector, equivalent to the rotate3d() function.
	/// </summary>
	public RotateProperty SetToZ()
	{
		Value = CssValues.Z;
		return this;
	}


}