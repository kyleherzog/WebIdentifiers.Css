// <autogenerated/>
namespace WebIdentifiers.Css.Properties;

/// <summary>
/// Provides a CSS entry for the WrapAfter property.
/// </summary>
public partial class WrapAfterProperty : CssPropertyEntry
{
	/// <summary>
	/// Represents a wrap-after CSS property entry.
	/// </summary>
	/// <param name="value">An optional value with which to initialize the CSS property entry.</param>
	public WrapAfterProperty(string? value = null)
		: base(CssPropertyNames.WrapAfter, value)
	{
	}

	/// <summary>
	/// Sets the value of the property entry to <c>auto</c>. Lines may break at allowed break points before and after the box, as determined by the line-breaking rules in effect.
	/// </summary>
	public WrapAfterProperty SetToAuto()
	{
		Value = CssValues.Auto;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>avoid</c>. Line breaking is suppressed immediately before/after the box: the UA may only break there if there are no other valid break points in the line. If the text breaks, line-breaking restrictions are honored as for auto.
	/// </summary>
	public WrapAfterProperty SetToAvoid()
	{
		Value = CssValues.Avoid;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>avoid-flex</c>. Same as avoid, but only for flex line breaks.
	/// </summary>
	public WrapAfterProperty SetToAvoidFlex()
	{
		Value = CssValues.AvoidFlex;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>avoid-line</c>. Same as avoid, but only for line breaks.
	/// </summary>
	public WrapAfterProperty SetToAvoidLine()
	{
		Value = CssValues.AvoidLine;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>flex</c>. Force a flex line break immediately before/after the box if the box is a flex item in a multi-line flex container.
	/// </summary>
	public WrapAfterProperty SetToFlex()
	{
		Value = CssValues.Flex;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>line</c>. Force a line break immediately before/after the box if the box is an inline-level box.
	/// </summary>
	public WrapAfterProperty SetToLine()
	{
		Value = CssValues.Line;
		return this;
	}


}