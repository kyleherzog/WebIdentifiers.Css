// <autogenerated/>
namespace WebIdentifiers.Css.Properties;

/// <summary>
/// Provides a CSS entry for the VoiceStress property.
/// </summary>
public partial class VoiceStressProperty : CssPropertyEntry
{
	/// <summary>
	/// Represents a voice-stress CSS property entry.
	/// </summary>
	/// <param name="value">An optional value with which to initialize the CSS property entry.</param>
	public VoiceStressProperty(string? value = null)
		: base(CssPropertyNames.VoiceStress, value)
	{
	}

	/// <summary>
	/// Sets the value of the property entry to <c>moderate</c>. These values are monotonically non-decreasing in strength. Their application results in more emphasis than what the speech synthesizer would normally produce (i.e. more than the value corresponding to normal).
	/// </summary>
	public VoiceStressProperty SetToModerate()
	{
		Value = CssValues.Moderate;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>none</c>. Prevents the synthesizer from emphasizing text it would normally emphasize.
	/// </summary>
	public VoiceStressProperty SetToNone()
	{
		Value = CssValues.None;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>normal</c>. Represents the default emphasis produced by the speech synthesizer.
	/// </summary>
	public VoiceStressProperty SetToNormal()
	{
		Value = CssValues.Normal;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>reduced</c>. Effectively the opposite of emphasizing a word.
	/// </summary>
	public VoiceStressProperty SetToReduced()
	{
		Value = CssValues.Reduced;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>strong</c>. These values are monotonically non-decreasing in strength. Their application results in more emphasis than what the speech synthesizer would normally produce (i.e. more than the value corresponding to normal).
	/// </summary>
	public VoiceStressProperty SetToStrong()
	{
		Value = CssValues.Strong;
		return this;
	}


}