// <autogenerated/>
#nullable enable
namespace WebIdentifiers.Css.Properties;

/// <summary>
/// Provides a CSS entry for the Contain property.
/// </summary>
public partial class ContainProperty : CssPropertyEntry
{
	/// <summary>
	/// Represents a contain CSS property entry.
	/// </summary>
	/// <param name="value">An optional value with which to initialize the CSS property entry.</param>
	public ContainProperty(string? value = null)
		: base(CssPropertyNames.Contain, value)
	{
	}

	/// <summary>
	/// Sets the value of the property entry to <c>content</c>. This value computes to layout paint style, and thus turns on all forms of containment except size containment for the element.
	/// </summary>
	public ContainProperty SetToContent()
	{
		Value = CssValues.Content;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>inline-size</c>. This value turns on inline-size containment for the element. This prevents the inline-size of its principal box from directly depending on its contents.
	/// </summary>
	public ContainProperty SetToInlineSize()
	{
		Value = CssValues.InlineSize;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>layout</c>. This value turns on layout containment for the element. This ensures that the containment box is totally opaque for layout purposes; nothing outside can affect its internal layout, and vice versa.
	/// </summary>
	public ContainProperty SetToLayout()
	{
		Value = CssValues.Layout;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>none</c>. This value indicates that the property has no effect. The element renders as normal, with no containment effects applied.
	/// </summary>
	public ContainProperty SetToNone()
	{
		Value = CssValues.None;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>paint</c>. This value turns on paint containment for the element. This ensures that the descendants of the containment box don’t display outside its bounds, so if an element is off-screen or otherwise not visible, its descendants are also guaranteed to be not visible.
	/// </summary>
	public ContainProperty SetToPaint()
	{
		Value = CssValues.Paint;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>size</c>. The value turns on size containment for the element. This ensures that the containment box can be laid out without needing to examine its descendants.
	/// </summary>
	public ContainProperty SetToSize()
	{
		Value = CssValues.Size;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>strict</c>. This value computes to size layout paint style, and thus turns on all forms of containment for the element.
	/// </summary>
	public ContainProperty SetToStrict()
	{
		Value = CssValues.Strict;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>style</c>. This value turns on style containment for the element. This ensures that, for properties which can have effects on more than just an element and its descendants, those effects don’t escape the element.
	/// </summary>
	public ContainProperty SetToStyle()
	{
		Value = CssValues.Style;
		return this;
	}


}