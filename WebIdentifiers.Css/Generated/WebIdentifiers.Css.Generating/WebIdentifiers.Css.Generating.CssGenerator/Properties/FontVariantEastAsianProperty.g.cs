// <autogenerated/>
namespace WebIdentifiers.Css.Properties;

/// <summary>
/// Provides a CSS entry for the FontVariantEastAsian property.
/// </summary>
public partial class FontVariantEastAsianProperty : CssPropertyEntry
{
	/// <summary>
	/// Represents a font-variant-east-asian CSS property entry.
	/// </summary>
	/// <param name="value">An optional value with which to initialize the CSS property entry.</param>
	public FontVariantEastAsianProperty(string? value = null)
		: base(CssPropertyNames.FontVariantEastAsian, value)
	{
	}

	/// <summary>
	/// Sets the value of the property entry to <c>full-width</c>. Enables rendering of full-width variants (OpenType feature: fwid).
	/// </summary>
	public FontVariantEastAsianProperty SetToFullWidth()
	{
		Value = CssValues.FullWidth;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>jis04</c>. Enables rendering of JIS2004 forms (OpenType feature: jp04). The various JIS variants reflect the glyph forms defined in different Japanese national standards. Fonts generally include glyphs defined by the most recent national standard, but it’s sometimes necessary to use older variants, to match signage for example.
	/// </summary>
	public FontVariantEastAsianProperty SetToJis04()
	{
		Value = CssValues.Jis04;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>jis78</c>. Enables rendering of JIS78 forms (OpenType feature: jp78).
	/// </summary>
	public FontVariantEastAsianProperty SetToJis78()
	{
		Value = CssValues.Jis78;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>jis83</c>. Enables rendering of JIS83 forms (OpenType feature: jp83).
	/// </summary>
	public FontVariantEastAsianProperty SetToJis83()
	{
		Value = CssValues.Jis83;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>jis90</c>. Enables rendering of JIS90 forms (OpenType feature: jp90).
	/// </summary>
	public FontVariantEastAsianProperty SetToJis90()
	{
		Value = CssValues.Jis90;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>normal</c>. None of the features listed below are enabled.
	/// </summary>
	public FontVariantEastAsianProperty SetToNormal()
	{
		Value = CssValues.Normal;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>proportional-width</c>. Enables rendering of proportionally-spaced variants (OpenType feature: pwid).
	/// </summary>
	public FontVariantEastAsianProperty SetToProportionalWidth()
	{
		Value = CssValues.ProportionalWidth;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>ruby</c>. Enables display of ruby variant glyphs (OpenType feature: ruby). Since ruby text is generally smaller than the associated body text, font designers can design special glyphs for use with ruby that are more readable than scaled down versions of the default glyphs. Only glyph selection is affected, there is no associated font scaling or other change that affects line layout. The red ruby text below is shown with default glyphs (top) and with ruby variant glyphs (bottom). Note the slight difference in stroke thickness.
	/// </summary>
	public FontVariantEastAsianProperty SetToRuby()
	{
		Value = CssValues.Ruby;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>simplified</c>. Enables rendering of simplified forms (OpenType feature: smpl).
	/// </summary>
	public FontVariantEastAsianProperty SetToSimplified()
	{
		Value = CssValues.Simplified;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>traditional</c>. Enables rendering of traditional forms (OpenType feature: trad).
	/// </summary>
	public FontVariantEastAsianProperty SetToTraditional()
	{
		Value = CssValues.Traditional;
		return this;
	}


}