// <autogenerated/>
#nullable enable
namespace WebIdentifiers.Css.Properties;

/// <summary>
/// Provides a CSS entry for the Cursor property.
/// </summary>
public partial class CursorProperty : CssPropertyEntry
{
	/// <summary>
	/// Represents a cursor CSS property entry.
	/// </summary>
	/// <param name="value">An optional value with which to initialize the CSS property entry.</param>
	public CursorProperty(string? value = null)
		: base(CssPropertyNames.Cursor, value)
	{
	}

	/// <summary>
	/// Sets the value of the property entry to <c>alias</c>. Indicates an alias of/shortcut to something is to be created. Often rendered as an arrow with a small curved arrow next to it.
	/// </summary>
	public CursorProperty SetToAlias()
	{
		Value = CssValues.Alias;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>all-scroll</c>. Indicates that the something can be scrolled in any direction. Often rendered as arrows pointing up, down, left, and right with a dot in the middle.
	/// </summary>
	public CursorProperty SetToAllScroll()
	{
		Value = CssValues.AllScroll;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>auto</c>. The UA determines the cursor to display based on the current context. Specifically, auto behaves as text over selectable text or editable elements, and default otherwise.
	/// </summary>
	public CursorProperty SetToAuto()
	{
		Value = CssValues.Auto;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>cell</c>. Indicates that a cell or set of cells may be selected. Often rendered as a thick plus-sign with a dot in the middle.
	/// </summary>
	public CursorProperty SetToCell()
	{
		Value = CssValues.Cell;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>col-resize</c>. Indicates that the item/column can be resized horizontally. Often rendered as arrows pointing left and right with a vertical bar separating them.
	/// </summary>
	public CursorProperty SetToColResize()
	{
		Value = CssValues.ColResize;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>context-menu</c>. A context menu is available for the object under the cursor. Often rendered as an arrow with a small menu-like graphic next to it.
	/// </summary>
	public CursorProperty SetToContextMenu()
	{
		Value = CssValues.ContextMenu;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>copy</c>. Indicates something is to be copied. Often rendered as an arrow with a small plus sign next to it.
	/// </summary>
	public CursorProperty SetToCopy()
	{
		Value = CssValues.Copy;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>crosshair</c>. A simple crosshair (e.g., short line segments resembling a &quot;+&quot; sign). Often used to indicate a two dimensional bitmap selection mode.
	/// </summary>
	public CursorProperty SetToCrosshair()
	{
		Value = CssValues.Crosshair;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>default</c>. The platform-dependent default cursor. Often rendered as an arrow.
	/// </summary>
	public CursorProperty SetToDefault()
	{
		Value = CssValues.Default;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>e-resize</c>. 
	/// </summary>
	public CursorProperty SetToEResize()
	{
		Value = CssValues.EResize;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>ew-resize</c>. 
	/// </summary>
	public CursorProperty SetToEwResize()
	{
		Value = CssValues.EwResize;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>grab</c>. Indicates that something can be grabbed (dragged to be moved). Often rendered as the backside of an open hand.
	/// </summary>
	public CursorProperty SetToGrab()
	{
		Value = CssValues.Grab;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>grabbing</c>. Indicates that something is being grabbed (dragged to be moved). Often rendered as the backside of a hand with fingers closed mostly out of view.
	/// </summary>
	public CursorProperty SetToGrabbing()
	{
		Value = CssValues.Grabbing;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>help</c>. Help is available for the object under the cursor. Often rendered as a question mark or a balloon.
	/// </summary>
	public CursorProperty SetToHelp()
	{
		Value = CssValues.Help;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>move</c>. Indicates something is to be moved.
	/// </summary>
	public CursorProperty SetToMove()
	{
		Value = CssValues.Move;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>ne-resize</c>. 
	/// </summary>
	public CursorProperty SetToNeResize()
	{
		Value = CssValues.NeResize;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>nesw-resize</c>. 
	/// </summary>
	public CursorProperty SetToNeswResize()
	{
		Value = CssValues.NeswResize;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>no-drop</c>. Indicates that the dragged item cannot be dropped at the current cursor location. Often rendered as a hand or pointer with a small circle with a line through it.
	/// </summary>
	public CursorProperty SetToNoDrop()
	{
		Value = CssValues.NoDrop;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>none</c>. No cursor is rendered for the element.
	/// </summary>
	public CursorProperty SetToNone()
	{
		Value = CssValues.None;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>not-allowed</c>. Indicates that the requested action will not be carried out. Often rendered as a circle with a line through it.
	/// </summary>
	public CursorProperty SetToNotAllowed()
	{
		Value = CssValues.NotAllowed;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>n-resize</c>. 
	/// </summary>
	public CursorProperty SetToNResize()
	{
		Value = CssValues.NResize;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>ns-resize</c>. 
	/// </summary>
	public CursorProperty SetToNsResize()
	{
		Value = CssValues.NsResize;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>nw-resize</c>. 
	/// </summary>
	public CursorProperty SetToNwResize()
	{
		Value = CssValues.NwResize;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>nwse-resize</c>. 
	/// </summary>
	public CursorProperty SetToNwseResize()
	{
		Value = CssValues.NwseResize;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>pointer</c>. The cursor is a pointer that indicates a link. Often rendered as the backside of a hand with the index finger extended. Unless otherwise specified, UAs must apply cursor: pointer to hyperlinks for all supported document formats via the UA stylesheet, using a normal (i.e. not !important) declaration. Authors should use pointer on links and may use on other interactive elements.
	/// </summary>
	public CursorProperty SetToPointer()
	{
		Value = CssValues.Pointer;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>progress</c>. A progress indicator. The program is performing some processing, but is different from wait in that the user may still interact with the program. Often rendered as a spinning beach ball, or an arrow with a watch or hourglass.
	/// </summary>
	public CursorProperty SetToProgress()
	{
		Value = CssValues.Progress;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>row-resize</c>. Indicates that the item/row can be resized vertically. Often rendered as arrows pointing up and down with a horizontal bar separating them.
	/// </summary>
	public CursorProperty SetToRowResize()
	{
		Value = CssValues.RowResize;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>se-resize</c>. 
	/// </summary>
	public CursorProperty SetToSeResize()
	{
		Value = CssValues.SeResize;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>s-resize</c>. 
	/// </summary>
	public CursorProperty SetToSResize()
	{
		Value = CssValues.SResize;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>sw-resize</c>. 
	/// </summary>
	public CursorProperty SetToSwResize()
	{
		Value = CssValues.SwResize;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>text</c>. Indicates text that may be selected. Often rendered as an I-beam. User agents must automatically display a vertical I-beam/cursor over elements with a horizontal writing mode, and a horizontal I-beam/cursor (e.g. same as the vertical-text keyword) over elements in a vertical writing mode. Additionally, user agents may take transforms (see [CSS-TRANSFORMS-1]) or other visual effects such as text on a path (See SVG 2 § 11.8 Text on a path), when choosing between the horizontal or vertical text cursor, and may display any angle of I-beam/cursor for text that is rendered at any particular angle.
	/// </summary>
	public CursorProperty SetToText()
	{
		Value = CssValues.Text;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>vertical-text</c>. Indicates vertical-text that may be selected. Often rendered as a horizontal I-beam.
	/// </summary>
	public CursorProperty SetToVerticalText()
	{
		Value = CssValues.VerticalText;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>wait</c>. Indicates that the program is busy and the user should wait. Often rendered as a watch or hourglass.
	/// </summary>
	public CursorProperty SetToWait()
	{
		Value = CssValues.Wait;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>w-resize</c>. 
	/// </summary>
	public CursorProperty SetToWResize()
	{
		Value = CssValues.WResize;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>zoom-in</c>. 
	/// </summary>
	public CursorProperty SetToZoomIn()
	{
		Value = CssValues.ZoomIn;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>zoom-out</c>. 
	/// </summary>
	public CursorProperty SetToZoomOut()
	{
		Value = CssValues.ZoomOut;
		return this;
	}


}