// <autogenerated/>
#nullable enable
namespace WebIdentifiers.Css.Properties;

/// <summary>
/// Provides a CSS entry for the SpeakAs property.
/// </summary>
public partial class SpeakAsProperty : CssPropertyEntry
{
	/// <summary>
	/// Represents a speak-as CSS property entry.
	/// </summary>
	/// <param name="value">An optional value with which to initialize the CSS property entry.</param>
	public SpeakAsProperty(string? value = null)
		: base(CssPropertyNames.SpeakAs, value)
	{
	}

	/// <summary>
	/// Sets the value of the property entry to <c>digits</c>. Speak numbers one digit at a time, for instance, “twelve” would be spoken as “one two”, and “31” as “three one”.
	/// </summary>
	public SpeakAsProperty SetToDigits()
	{
		Value = CssValues.Digits;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>literal-punctuation</c>. Punctuation such as semicolons, braces, and so on is named aloud (i.e. spoken literally) rather than rendered naturally as appropriate pauses.
	/// </summary>
	public SpeakAsProperty SetToLiteralPunctuation()
	{
		Value = CssValues.LiteralPunctuation;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>no-punctuation</c>. Punctuation is not rendered: neither spoken nor rendered as pauses.
	/// </summary>
	public SpeakAsProperty SetToNoPunctuation()
	{
		Value = CssValues.NoPunctuation;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>normal</c>. Uses language-dependent pronunciation rules for rendering the element’s content. For example, punctuation is not spoken as-is, but instead rendered naturally as appropriate pauses.
	/// </summary>
	public SpeakAsProperty SetToNormal()
	{
		Value = CssValues.Normal;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>spell-out</c>. Spells the text one letter at a time (useful for acronyms and abbreviations). In languages where accented characters are rare, it is permitted to drop accents in favor of alternative unaccented spellings. As an example, in English, the word “rôle” can also be written as “role”. A conforming implementation would thus be able to spell-out “rôle” as “R O L E”.
	/// </summary>
	public SpeakAsProperty SetToSpellOut()
	{
		Value = CssValues.SpellOut;
		return this;
	}


}