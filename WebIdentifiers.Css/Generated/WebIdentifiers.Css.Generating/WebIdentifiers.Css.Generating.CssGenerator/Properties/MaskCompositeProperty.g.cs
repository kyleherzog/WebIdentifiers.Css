// <autogenerated/>
namespace WebIdentifiers.Css.Properties;

/// <summary>
/// Provides a CSS entry for the MaskComposite property.
/// </summary>
public partial class MaskCompositeProperty : CssPropertyEntry
{
	/// <summary>
	/// Represents a mask-composite CSS property entry.
	/// </summary>
	/// <param name="value">An optional value with which to initialize the CSS property entry.</param>
	public MaskCompositeProperty(string? value = null)
		: base(CssPropertyNames.MaskComposite, value)
	{
	}

	/// <summary>
	/// Sets the value of the property entry to <c>add</c>. The source is placed over the destination. (See Porter-Duff compositing operator source over for more details.)
	/// </summary>
	public MaskCompositeProperty SetToAdd()
	{
		Value = CssValues.Add;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>exclude</c>. The non-overlapping regions of source and destination are combined. (See Porter-Duff compositing operator XOR.)
	/// </summary>
	public MaskCompositeProperty SetToExclude()
	{
		Value = CssValues.Exclude;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>intersect</c>. The parts of source that overlap the destination, replace the destination. (See Porter-Duff compositing operator source in .)
	/// </summary>
	public MaskCompositeProperty SetToIntersect()
	{
		Value = CssValues.Intersect;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>subtract</c>. The source is placed, where it falls outside of the destination. (See Porter-Duff compositing operator source out for more details.)
	/// </summary>
	public MaskCompositeProperty SetToSubtract()
	{
		Value = CssValues.Subtract;
		return this;
	}


}