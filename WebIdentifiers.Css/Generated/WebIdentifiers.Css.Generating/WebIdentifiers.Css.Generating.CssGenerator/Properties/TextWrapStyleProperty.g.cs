// <autogenerated/>
namespace WebIdentifiers.Css.Properties;

/// <summary>
/// Provides a CSS entry for the TextWrapStyle property.
/// </summary>
public partial class TextWrapStyleProperty : CssPropertyEntry
{
	/// <summary>
	/// Represents a text-wrap-style CSS property entry.
	/// </summary>
	/// <param name="value">An optional value with which to initialize the CSS property entry.</param>
	public TextWrapStyleProperty(string? value = null)
		: base(CssPropertyNames.TextWrapStyle, value)
	{
	}

	/// <summary>
	/// Sets the value of the property entry to <c>auto</c>. The exact algorithm for selecting which soft wrap opportunity to break at is UA-defined. The algorithm may consider multiple lines when making break decisions. The UA may bias for speed over best layout. The UA must not attempt to even out all lines (including the last) as for balance. This value selects the UA’s preferred (or most Web-compatible) wrapping algorithm.
	/// </summary>
	public TextWrapStyleProperty SetToAuto()
	{
		Value = CssValues.Auto;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>balance</c>. Line breaks are chosen to balance the remaining (empty) space in each line box, if better balance than auto is possible. This must not change the number of line boxes the block would contain if text-wrap were set to auto. The remaining space to consider is that which remains after placing floats and inline content, but before any adjustments due to text justification. Line boxes are balanced when the standard deviation from the average inline-size of the remaining space in each line box is reduced over the block (including lines that end in a forced break). The exact algorithm is UA-defined. UAs may treat this value as auto if there are more than ten lines to balance.
	/// </summary>
	public TextWrapStyleProperty SetToBalance()
	{
		Value = CssValues.Balance;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>pretty</c>. Specifies the UA should bias for better layout over speed, and is expected to consider multiple lines, when making break decisions. Otherwise equivalent to auto,
	/// </summary>
	public TextWrapStyleProperty SetToPretty()
	{
		Value = CssValues.Pretty;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>stable</c>. Specifies that content on subsequent lines should not be considered when making break decisions so that when editing text any content before the cursor remains stable; otherwise equivalent to auto,
	/// </summary>
	public TextWrapStyleProperty SetToStable()
	{
		Value = CssValues.Stable;
		return this;
	}


}