// <autogenerated/>
#nullable enable
namespace WebIdentifiers.Css.Properties;

/// <summary>
/// Provides a CSS entry for the ScrollbarWidth property.
/// </summary>
public partial class ScrollbarWidthProperty : CssPropertyEntry
{
	/// <summary>
	/// Represents a scrollbar-width CSS property entry.
	/// </summary>
	/// <param name="value">An optional value with which to initialize the CSS property entry.</param>
	public ScrollbarWidthProperty(string? value = null)
		: base(CssPropertyNames.ScrollbarWidth, value)
	{
	}

	/// <summary>
	/// Sets the value of the property entry to <c>auto</c>. Implementations must use the default scrollbar width.
	/// </summary>
	public ScrollbarWidthProperty SetToAuto()
	{
		Value = CssValues.Auto;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>none</c>. Implementations must not display any scrollbar, however the element’s scrollability by other means is not affected. Using this value can prevent mouse-only users from being able to scroll. Authors should ensure that mouse-only users can still reach hidden content, even if they have no scrollwheel. Authors that use none should provide an alternative/equivalent visual hint that scrolling is possible and there is more content.
	/// </summary>
	public ScrollbarWidthProperty SetToNone()
	{
		Value = CssValues.None;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>thin</c>. Implementations should use thinner scrollbars than auto. This may mean a thin variant of scrollbar provided by the platform, or a custom scrollbar thinner than the default platform scrollbar. The scrollbar must nonetheless remain wide enough to be usable. (Implementers may wish to consult WCAG 2.1 SC 2.5.5 Target Size. [WCAG21]) User agents may disregard this value and treat it as auto, for instance when the user has indicated discomfort for thin scrollbars through some UA or OS setting. (User agents are encouraged to provide such a setting.)
	/// </summary>
	public ScrollbarWidthProperty SetToThin()
	{
		Value = CssValues.Thin;
		return this;
	}


}