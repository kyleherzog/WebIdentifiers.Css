// <autogenerated/>
namespace WebIdentifiers.Css.Properties;

/// <summary>
/// Provides a CSS entry for the AnimationDirection property.
/// </summary>
public partial class AnimationDirectionProperty : CssPropertyEntry
{
	/// <summary>
	/// Represents a animation-direction CSS property entry.
	/// </summary>
	/// <param name="value">An optional value with which to initialize the CSS property entry.</param>
	public AnimationDirectionProperty(string? value = null)
		: base(CssPropertyNames.AnimationDirection, value)
	{
	}

	/// <summary>
	/// Sets the value of the property entry to <c>alternate</c>. The animation cycle iterations that are odd counts are played in the normal direction, and the animation cycle iterations that are even counts are played in a reverse direction.
	/// </summary>
	public AnimationDirectionProperty SetToAlternate()
	{
		Value = CssValues.Alternate;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>alternate-reverse</c>. The animation cycle iterations that are odd counts are played in the reverse direction, and the animation cycle iterations that are even counts are played in a normal direction.
	/// </summary>
	public AnimationDirectionProperty SetToAlternateReverse()
	{
		Value = CssValues.AlternateReverse;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>normal</c>. All iterations of the animation are played as specified.
	/// </summary>
	public AnimationDirectionProperty SetToNormal()
	{
		Value = CssValues.Normal;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>reverse</c>. All iterations of the animation are played in the reverse direction from the way they were specified.
	/// </summary>
	public AnimationDirectionProperty SetToReverse()
	{
		Value = CssValues.Reverse;
		return this;
	}


}