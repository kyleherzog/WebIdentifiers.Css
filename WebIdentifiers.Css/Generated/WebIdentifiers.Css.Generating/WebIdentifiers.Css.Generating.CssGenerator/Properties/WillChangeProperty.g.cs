// <autogenerated/>
#nullable enable
namespace WebIdentifiers.Css.Properties;

/// <summary>
/// Provides a CSS entry for the WillChange property.
/// </summary>
public partial class WillChangeProperty : CssPropertyEntry
{
	/// <summary>
	/// Represents a will-change CSS property entry.
	/// </summary>
	/// <param name="value">An optional value with which to initialize the CSS property entry.</param>
	public WillChangeProperty(string? value = null)
		: base(CssPropertyNames.WillChange, value)
	{
	}

	/// <summary>
	/// Sets the value of the property entry to <c>auto</c>. Expresses no particular intent; the user agent should apply whatever heuristics and optimizations it normally does.
	/// </summary>
	public WillChangeProperty SetToAuto()
	{
		Value = CssValues.Auto;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>contents</c>. Indicates that the author expects to animate or change something about the element’s contents in the near future. For example, browsers often “cache” rendering of elements over time, because most things don’t change very often, or only change their position. However, if an element does change its contents continually, producing and maintaining this cache is a waste of time. A browser might take this value as a signal to cache less aggressively on the element, or avoid caching at all and just continually re-render the element from scratch. This value is mostly intended to help browsers optimize JS-based animations of content, which change aspects of an element’s contents many times per second. This kind of optimization, when possible, is already done automatically by browsers when declarative animations are used.
	/// </summary>
	public WillChangeProperty SetToContents()
	{
		Value = CssValues.Contents;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>scroll-position</c>. Indicates that the author expects to animate or change the scroll position of the element in the near future. For example, browsers often only render the content in the &quot;scroll window&quot; on a scrollable element, and some of the content past that window, balancing memory and time savings from the skipped rendering against making scrolling look nice. A browser might take this value as a signal to expand the range of content around the scroll window that is rendered, so that longer/faster scrolls can be done smoothly.
	/// </summary>
	public WillChangeProperty SetToScrollPosition()
	{
		Value = CssValues.ScrollPosition;
		return this;
	}


}