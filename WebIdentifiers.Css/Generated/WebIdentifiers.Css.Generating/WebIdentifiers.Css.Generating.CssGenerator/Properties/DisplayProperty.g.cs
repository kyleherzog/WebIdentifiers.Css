// <autogenerated/>
#nullable enable
namespace WebIdentifiers.Css.Properties;

/// <summary>
/// Provides a CSS entry for the Display property.
/// </summary>
public partial class DisplayProperty : CssPropertyEntry
{
	/// <summary>
	/// Represents a display CSS property entry.
	/// </summary>
	/// <param name="value">An optional value with which to initialize the CSS property entry.</param>
	public DisplayProperty(string? value = null)
		: base(CssPropertyNames.Display, value)
	{
	}

	/// <summary>
	/// Sets the value of the property entry to <c>block</c>. This value causes an element to generate a block box.
	/// </summary>
	public DisplayProperty SetToBlock()
	{
		Value = CssValues.Block;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>inline</c>. This value causes an element to generate one or more inline boxes.
	/// </summary>
	public DisplayProperty SetToInline()
	{
		Value = CssValues.Inline;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>inline-block</c>. This value causes an element to generate an inline-level block container. The inside of an inline-block is formatted as a block box, and the element itself is formatted as an atomic inline-level box.
	/// </summary>
	public DisplayProperty SetToInlineBlock()
	{
		Value = CssValues.InlineBlock;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>inline-table</c>. These values cause an element to behave like a table element (subject to restrictions described in the chapter on tables).
	/// </summary>
	public DisplayProperty SetToInlineTable()
	{
		Value = CssValues.InlineTable;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>list-item</c>. The list-item keyword causes the element to generate a ::marker pseudo-element [CSS-PSEUDO-4] with the content specified by its list-style properties (CSS 2.1§12.5 Lists) [CSS2] together with a principal box of the specified type for its own contents.
	/// </summary>
	public DisplayProperty SetToListItem()
	{
		Value = CssValues.ListItem;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>none</c>. This value causes an element to not appear in the formatting structure (i.e., in visual media the element generates no boxes and has no effect on layout). Descendant elements do not generate any boxes either; the element and its content are removed from the formatting structure entirely. This behavior cannot be overridden by setting the display property on the descendants. Please note that a display of none does not create an invisible box; it creates no box at all. CSS includes mechanisms that enable an element to generate boxes in the formatting structure that affect formatting but are not visible themselves. Please consult the section on visibility for details.
	/// </summary>
	public DisplayProperty SetToNone()
	{
		Value = CssValues.None;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>table</c>. These values cause an element to behave like a table element (subject to restrictions described in the chapter on tables).
	/// </summary>
	public DisplayProperty SetToTable()
	{
		Value = CssValues.Table;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>table-caption</c>. These values cause an element to behave like a table element (subject to restrictions described in the chapter on tables).
	/// </summary>
	public DisplayProperty SetToTableCaption()
	{
		Value = CssValues.TableCaption;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>table-cell</c>. These values cause an element to behave like a table element (subject to restrictions described in the chapter on tables).
	/// </summary>
	public DisplayProperty SetToTableCell()
	{
		Value = CssValues.TableCell;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>table-column</c>. These values cause an element to behave like a table element (subject to restrictions described in the chapter on tables).
	/// </summary>
	public DisplayProperty SetToTableColumn()
	{
		Value = CssValues.TableColumn;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>table-column-group</c>. These values cause an element to behave like a table element (subject to restrictions described in the chapter on tables).
	/// </summary>
	public DisplayProperty SetToTableColumnGroup()
	{
		Value = CssValues.TableColumnGroup;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>table-footer-group</c>. These values cause an element to behave like a table element (subject to restrictions described in the chapter on tables).
	/// </summary>
	public DisplayProperty SetToTableFooterGroup()
	{
		Value = CssValues.TableFooterGroup;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>table-header-group</c>. These values cause an element to behave like a table element (subject to restrictions described in the chapter on tables).
	/// </summary>
	public DisplayProperty SetToTableHeaderGroup()
	{
		Value = CssValues.TableHeaderGroup;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>table-row</c>. These values cause an element to behave like a table element (subject to restrictions described in the chapter on tables).
	/// </summary>
	public DisplayProperty SetToTableRow()
	{
		Value = CssValues.TableRow;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>table-row-group</c>. These values cause an element to behave like a table element (subject to restrictions described in the chapter on tables).
	/// </summary>
	public DisplayProperty SetToTableRowGroup()
	{
		Value = CssValues.TableRowGroup;
		return this;
	}


}