// <autogenerated/>
namespace WebIdentifiers.Css.Properties;

/// <summary>
/// Provides a CSS entry for the RubyAlign property.
/// </summary>
public partial class RubyAlignProperty : CssPropertyEntry
{
	/// <summary>
	/// Represents a ruby-align CSS property entry.
	/// </summary>
	/// <param name="value">An optional value with which to initialize the CSS property entry.</param>
	public RubyAlignProperty(string? value = null)
		: base(CssPropertyNames.RubyAlign, value)
	{
	}

	/// <summary>
	/// Sets the value of the property entry to <c>center</c>. The ruby content is centered within its box. center ruby distribution
	/// </summary>
	public RubyAlignProperty SetToCenter()
	{
		Value = CssValues.Center;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>space-around</c>. As for space-between except that there exists an extra justification opportunities whose space is distributed half before and half after the ruby content. space-around ruby distribution
	/// </summary>
	public RubyAlignProperty SetToSpaceAround()
	{
		Value = CssValues.SpaceAround;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>space-between</c>. The ruby content expands as defined for normal text justification (as defined by text-justify), except that if there are no justification opportunities the content is centered. space-between ruby distribution
	/// </summary>
	public RubyAlignProperty SetToSpaceBetween()
	{
		Value = CssValues.SpaceBetween;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>start</c>. The ruby content is aligned with the start edge of its box. start ruby distribution "Katatsuki ruby" (肩付きルビ) is close to, but not quite the same as, this start value. In particular, its behavior when overhanging its base can differ from start alignment depending on surrounding context, see JLREQ. Also, it’s only ever used in vertical writing, and the JLTF considers it not particularly important, so it may not be worth the effort to make this value smart enough to deal with katatsuki ruby. If start is needed for some other purpose, we should keep it. Otherwise, maybe just drop it?
	/// </summary>
	public RubyAlignProperty SetToStart()
	{
		Value = CssValues.Start;
		return this;
	}


}