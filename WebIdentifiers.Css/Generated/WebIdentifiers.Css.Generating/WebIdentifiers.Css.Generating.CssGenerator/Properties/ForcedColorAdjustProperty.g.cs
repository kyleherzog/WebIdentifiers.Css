// <autogenerated/>
#nullable enable
namespace WebIdentifiers.Css.Properties;

/// <summary>
/// Provides a CSS entry for the ForcedColorAdjust property.
/// </summary>
public partial class ForcedColorAdjustProperty : CssPropertyEntry
{
	/// <summary>
	/// Represents a forced-color-adjust CSS property entry.
	/// </summary>
	/// <param name="value">An optional value with which to initialize the CSS property entry.</param>
	public ForcedColorAdjustProperty(string? value = null)
		: base(CssPropertyNames.ForcedColorAdjust, value)
	{
	}

	/// <summary>
	/// Sets the value of the property entry to <c>auto</c>. The element’s colors are automatically adjusted by the UA in forced colors mode.
	/// </summary>
	public ForcedColorAdjustProperty SetToAuto()
	{
		Value = CssValues.Auto;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>none</c>. The element’s colors are not automatically adjusted by the UA in forced colors mode. Authors should only use this value when they are themselves adjusting the colors to support the user’s color and contrast needs and need to make changes to the UA’s default adjustments to provide a more appropriate user experience for those elements.
	/// </summary>
	public ForcedColorAdjustProperty SetToNone()
	{
		Value = CssValues.None;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>preserve-parent-color</c>. In forced colors mode, if the color property inherits from its parent (i.e. there is no cascaded value or the cascaded value is currentColor, inherit, or another keyword that inherits from the parent), then it computes to the used color of its parent’s color value. In all other respects, behaves the same as none.
	/// </summary>
	public ForcedColorAdjustProperty SetToPreserveParentColor()
	{
		Value = CssValues.PreserveParentColor;
		return this;
	}


}