// <autogenerated/>
#nullable enable
namespace WebIdentifiers.Css.Properties;

/// <summary>
/// Provides a CSS entry for the WhiteSpace property.
/// </summary>
public partial class WhiteSpaceProperty : CssPropertyEntry
{
	/// <summary>
	/// Represents a white-space CSS property entry.
	/// </summary>
	/// <param name="value">An optional value with which to initialize the CSS property entry.</param>
	public WhiteSpaceProperty(string? value = null)
		: base(CssPropertyNames.WhiteSpace, value)
	{
	}

	/// <summary>
	/// Sets the value of the property entry to <c>break-spaces</c>. The behavior is identical to that of pre-wrap, except that: Any sequence of preserved white space or other space separators always takes up space, including at the end of the line. A soft wrap opportunity exists after every preserved white space character and after every other space separator (including between adjacent spaces).
	/// </summary>
	public WhiteSpaceProperty SetToBreakSpaces()
	{
		Value = CssValues.BreakSpaces;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>normal</c>. 
	/// </summary>
	public WhiteSpaceProperty SetToNormal()
	{
		Value = CssValues.Normal;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>nowrap</c>. Like normal, this value collapses white space; but like pre, it does not allow wrapping.
	/// </summary>
	public WhiteSpaceProperty SetToNowrap()
	{
		Value = CssValues.Nowrap;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>pre</c>. 
	/// </summary>
	public WhiteSpaceProperty SetToPre()
	{
		Value = CssValues.Pre;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>pre-line</c>. 
	/// </summary>
	public WhiteSpaceProperty SetToPreLine()
	{
		Value = CssValues.PreLine;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>pre-wrap</c>. 
	/// </summary>
	public WhiteSpaceProperty SetToPreWrap()
	{
		Value = CssValues.PreWrap;
		return this;
	}


}