// <autogenerated/>
namespace WebIdentifiers.Css.Properties;

/// <summary>
/// Provides a CSS entry for the ColumnSpan property.
/// </summary>
public partial class ColumnSpanProperty : CssPropertyEntry
{
	/// <summary>
	/// Represents a column-span CSS property entry.
	/// </summary>
	/// <param name="value">An optional value with which to initialize the CSS property entry.</param>
	public ColumnSpanProperty(string? value = null)
		: base(CssPropertyNames.ColumnSpan, value)
	{
	}

	/// <summary>
	/// Sets the value of the property entry to <c>all</c>. Add final content from previous level
	/// </summary>
	public ColumnSpanProperty SetToAll()
	{
		Value = CssValues.All;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>auto</c>. The number of columns spanned by the element depends on its min-content outer size in the inline direction of the multi-column container. If it is smaller than the used value of column-width, this is the same as if column-span: none had been specified. Otherwise, the number of columns spanned is the smallest positive integer n for which n × column-width + (n - 1) × column-gap is larger than the min-content outer size. If this would be larger than the number of columns, the number of columns spanned will be the same as if column-span: all had been specified. If column-span: 1 does not do the same as column-span: none, should this behave as column-span: 1 or as column-span: none when the element is small enough?
	/// </summary>
	public ColumnSpanProperty SetToAuto()
	{
		Value = CssValues.Auto;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>none</c>. Add final content from previous level
	/// </summary>
	public ColumnSpanProperty SetToNone()
	{
		Value = CssValues.None;
		return this;
	}


}