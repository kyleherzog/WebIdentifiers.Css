// <autogenerated/>
#nullable enable
namespace WebIdentifiers.Css.Properties;

/// <summary>
/// Provides a CSS entry for the AnimationPlayState property.
/// </summary>
public partial class AnimationPlayStateProperty : CssPropertyEntry
{
	/// <summary>
	/// Represents a animation-play-state CSS property entry.
	/// </summary>
	/// <param name="value">An optional value with which to initialize the CSS property entry.</param>
	public AnimationPlayStateProperty(string? value = null)
		: base(CssPropertyNames.AnimationPlayState, value)
	{
	}

	/// <summary>
	/// Sets the value of the property entry to <c>paused</c>. While this property is set to paused, the animation is paused. The animation continues to apply to the element with the progress it had made before being paused. When unpaused (set back to running), it restarts from where it left off, as if the &quot;clock&quot; that controls the animation had stopped and started again. If the property is set to paused during the delay phase of the animation, the delay clock is also paused and resumes as soon as animation-play-state is set back to running.
	/// </summary>
	public AnimationPlayStateProperty SetToPaused()
	{
		Value = CssValues.Paused;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>running</c>. While this property is set to running, the animation proceeds as normal.
	/// </summary>
	public AnimationPlayStateProperty SetToRunning()
	{
		Value = CssValues.Running;
		return this;
	}


}