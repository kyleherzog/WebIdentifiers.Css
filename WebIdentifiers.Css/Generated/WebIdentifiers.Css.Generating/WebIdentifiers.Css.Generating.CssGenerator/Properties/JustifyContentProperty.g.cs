// <autogenerated/>
#nullable enable
namespace WebIdentifiers.Css.Properties;

/// <summary>
/// Provides a CSS entry for the JustifyContent property.
/// </summary>
public partial class JustifyContentProperty : CssPropertyEntry
{
	/// <summary>
	/// Represents a justify-content CSS property entry.
	/// </summary>
	/// <param name="value">An optional value with which to initialize the CSS property entry.</param>
	public JustifyContentProperty(string? value = null)
		: base(CssPropertyNames.JustifyContent, value)
	{
	}

	/// <summary>
	/// Sets the value of the property entry to <c>center</c>. Flex items are packed toward the center of the line. The flex items on the line are placed flush with each other and aligned in the center of the line, with equal amounts of space between the main-start edge of the line and the first item on the line and between the main-end edge of the line and the last item on the line. (If the leftover free-space is negative, the flex items will overflow equally in both directions.)
	/// </summary>
	public JustifyContentProperty SetToCenter()
	{
		Value = CssValues.Center;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>flex-end</c>. Flex items are packed toward the end of the line. The main-end margin edge of the last flex item is placed flush with the main-end edge of the line, and each preceding flex item is placed flush with the subsequent item.
	/// </summary>
	public JustifyContentProperty SetToFlexEnd()
	{
		Value = CssValues.FlexEnd;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>flex-start</c>. Flex items are packed toward the start of the line. The main-start margin edge of the first flex item on the line is placed flush with the main-start edge of the line, and each subsequent flex item is placed flush with the preceding item.
	/// </summary>
	public JustifyContentProperty SetToFlexStart()
	{
		Value = CssValues.FlexStart;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>left</c>. Aligns the alignment subject to be flush with the alignment container’s line-left or physical left edge, whichever is in the appropriate axis. If the property’s axis is not parallel with either left↔right axis, this value behaves as start. Currently, the only case where the property’s axis is not parallel with either left↔right axis is in a column flexbox.
	/// </summary>
	public JustifyContentProperty SetToLeft()
	{
		Value = CssValues.Left;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>normal</c>. Aligns the contents of the box as a whole (as the alignment subject) within the box itself (as the alignment container): along the inline/row/main axis of the box (for justify-content) or the block/column/cross axis of the box (for align-content). Values other than normal are defined in § 4 Alignment Keywords, above.
	/// </summary>
	public JustifyContentProperty SetToNormal()
	{
		Value = CssValues.Normal;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>right</c>. Aligns the alignment subject to be flush with the alignment container’s line-right or physical right edge, whichever is in the appropriate axis. If the property’s axis is not parallel with either left↔right axis, this value behaves as start. Currently, the only case where the property’s axis is not parallel with either left↔right axis is in a column flexbox.
	/// </summary>
	public JustifyContentProperty SetToRight()
	{
		Value = CssValues.Right;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>space-around</c>. Flex items are evenly distributed in the line, with half-size spaces on either end. If the leftover free-space is negative or there is only a single flex item on the line, this value is identical to center. Otherwise, the flex items on the line are distributed such that the spacing between any two adjacent flex items on the line is the same, and the spacing between the first/last flex items and the flex container edges is half the size of the spacing between flex items.
	/// </summary>
	public JustifyContentProperty SetToSpaceAround()
	{
		Value = CssValues.SpaceAround;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>space-between</c>. Flex items are evenly distributed in the line. If the leftover free-space is negative or there is only a single flex item on the line, this value is identical to flex-start. Otherwise, the main-start margin edge of the first flex item on the line is placed flush with the main-start edge of the line, the main-end margin edge of the last flex item on the line is placed flush with the main-end edge of the line, and the remaining flex items on the line are distributed so that the spacing between any two adjacent items is the same.
	/// </summary>
	public JustifyContentProperty SetToSpaceBetween()
	{
		Value = CssValues.SpaceBetween;
		return this;
	}


}