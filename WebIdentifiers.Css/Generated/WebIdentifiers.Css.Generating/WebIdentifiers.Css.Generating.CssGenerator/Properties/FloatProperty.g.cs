// <autogenerated/>
#nullable enable
namespace WebIdentifiers.Css.Properties;

/// <summary>
/// Provides a CSS entry for the Float property.
/// </summary>
public partial class FloatProperty : CssPropertyEntry
{
	/// <summary>
	/// Represents a float CSS property entry.
	/// </summary>
	/// <param name="value">An optional value with which to initialize the CSS property entry.</param>
	public FloatProperty(string? value = null)
		: base(CssPropertyNames.Float, value)
	{
	}

	/// <summary>
	/// Sets the value of the property entry to <c>block-end</c>. If the float reference is a line box, block-end behaves like inline-end. If the float reference is not a line box, the element generates a box that is floated to the block-end and line-end outer edges of the float reference. The initial value of the max-width or max-height property that refers to the inline size of the float is &apos;100%&apos;. Content flows on the block-start side of the box.
	/// </summary>
	public FloatProperty SetToBlockEnd()
	{
		Value = CssValues.BlockEnd;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>block-start</c>. If the float reference is a line box, block-start behaves like inline-start. If the float reference is not a line box, the element generates a box that is floated to the block-start and line-start outer edges of the float reference. The initial value of the max-width or max-height property that refers to the inline size of the float is &apos;100%&apos;. Content flows on the block-end side of the box.
	/// </summary>
	public FloatProperty SetToBlockStart()
	{
		Value = CssValues.BlockStart;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>bottom</c>. Behave like block-end or inline-end depending on the float containing block’s direction and writing-mode.
	/// </summary>
	public FloatProperty SetToBottom()
	{
		Value = CssValues.Bottom;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>footnote</c>. each footnote element is placed in the footnote area of the page
	/// </summary>
	public FloatProperty SetToFootnote()
	{
		Value = CssValues.Footnote;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>inline-end</c>. If the float reference is a line box, the element generates a box that is floated to the line-ebd outer edge of the float reference and content flows on the line-start side of the box. If the float reference is not a line box, the element generates a box that is floated to the line-end and block-end outer edges of the float reference.
	/// </summary>
	public FloatProperty SetToInlineEnd()
	{
		Value = CssValues.InlineEnd;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>inline-start</c>. If the float reference is a line box, the element generates a box that is floated to the line-start outer edge of the float reference and content flows on the line-end side of the box. If the float reference is not a line box, the element generates a box that is floated to the line-start and block-start outer edges of the float reference.
	/// </summary>
	public FloatProperty SetToInlineStart()
	{
		Value = CssValues.InlineStart;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>left</c>. If the float reference is a line box, behaves like inline-start or inline-end, whichever corresponds to line-left for the float reference. Otherwise, behaves like block-end, inline-start or inline-end depending on the float containing block’s direction and writing-mode.
	/// </summary>
	public FloatProperty SetToLeft()
	{
		Value = CssValues.Left;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>none</c>. The box is not floated.
	/// </summary>
	public FloatProperty SetToNone()
	{
		Value = CssValues.None;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>right</c>. If the float reference is a line box, behaves like inline-start or inline-end, whichever corresponds to line-right for the float reference. Otherwise, behaves like block-start, inline-start or inline-end depending on the float containing block’s direction and writing-mode.
	/// </summary>
	public FloatProperty SetToRight()
	{
		Value = CssValues.Right;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>snap-block</c>. Behaves as snap-block(2em, near)
	/// </summary>
	public FloatProperty SetToSnapBlock()
	{
		Value = CssValues.SnapBlock;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>snap-inline</c>. same as snap-inline(2em, near)
	/// </summary>
	public FloatProperty SetToSnapInline()
	{
		Value = CssValues.SnapInline;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>top</c>. Behave like block-start or inline-start depending on the float containing block’s direction and writing-mode.
	/// </summary>
	public FloatProperty SetToTop()
	{
		Value = CssValues.Top;
		return this;
	}


}