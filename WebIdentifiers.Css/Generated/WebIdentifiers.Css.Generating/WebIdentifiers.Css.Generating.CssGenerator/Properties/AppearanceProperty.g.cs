// <autogenerated/>
namespace WebIdentifiers.Css.Properties;

/// <summary>
/// Provides a CSS entry for the Appearance property.
/// </summary>
public partial class AppearanceProperty : CssPropertyEntry
{
	/// <summary>
	/// Represents a appearance CSS property entry.
	/// </summary>
	/// <param name="value">An optional value with which to initialize the CSS property entry.</param>
	public AppearanceProperty(string? value = null)
		: base(CssPropertyNames.Appearance, value)
	{
	}

	/// <summary>
	/// Sets the value of the property entry to <c>auto</c>. Elements representing widgets should have the native appearance of that widget, if the properties that disable native appearance for widgets are not in effect. See § 7.2.1 Properties Disabling Native Appearance. The host language is responsible for defining which elements represent which widgets. Elements other than widgets must be rendered as for none.
	/// </summary>
	public AppearanceProperty SetToAuto()
	{
		Value = CssValues.Auto;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>button</c>. 
	/// </summary>
	public AppearanceProperty SetToButton()
	{
		Value = CssValues.Button;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>checkbox</c>. 
	/// </summary>
	public AppearanceProperty SetToCheckbox()
	{
		Value = CssValues.Checkbox;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>listbox</c>. 
	/// </summary>
	public AppearanceProperty SetToListbox()
	{
		Value = CssValues.Listbox;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>menulist</c>. 
	/// </summary>
	public AppearanceProperty SetToMenulist()
	{
		Value = CssValues.Menulist;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>menulist-button</c>. 
	/// </summary>
	public AppearanceProperty SetToMenulistButton()
	{
		Value = CssValues.MenulistButton;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>meter</c>. 
	/// </summary>
	public AppearanceProperty SetToMeter()
	{
		Value = CssValues.Meter;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>none</c>. The element is rendered following the usual rules of CSS. Replaced elements other than widgets are not affected by this and remain replaced elements. Widgets must not have their native appearance, and instead must have their primitive appearance. See § 7.2.2 Effects of appearance on Decorative Aspects of Elements and § 7.2.3 Effects of appearance on Semantic Aspects of Elements for details.
	/// </summary>
	public AppearanceProperty SetToNone()
	{
		Value = CssValues.None;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>progress-bar</c>. 
	/// </summary>
	public AppearanceProperty SetToProgressBar()
	{
		Value = CssValues.ProgressBar;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>radio</c>. 
	/// </summary>
	public AppearanceProperty SetToRadio()
	{
		Value = CssValues.Radio;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>searchfield</c>. 
	/// </summary>
	public AppearanceProperty SetToSearchfield()
	{
		Value = CssValues.Searchfield;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>textarea</c>. 
	/// </summary>
	public AppearanceProperty SetToTextarea()
	{
		Value = CssValues.Textarea;
		return this;
	}


	/// <summary>
	/// Sets the value of the property entry to <c>textfield</c>. 
	/// </summary>
	public AppearanceProperty SetToTextfield()
	{
		Value = CssValues.Textfield;
		return this;
	}


}