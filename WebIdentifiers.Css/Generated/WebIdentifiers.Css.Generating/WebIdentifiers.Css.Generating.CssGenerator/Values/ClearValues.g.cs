// <autogenerated/>
namespace WebIdentifiers.Css.Values;

public partial class ClearValues : PropertyValuesBase
{
	/// <summary>
	/// Gets the name of the <c>all</c> property. Behave like both-block and both-inline.
	/// </summary>
	public string All => CssValues.All;

	/// <summary>
	/// Gets the name of the <c>block-end</c> property. If applied to a block-level element or an inline float, behaves like inline-end. If applied to a page float, the float reference in which the page float is placed will be seen as full when determining whether it can host subsequent page floats that float in the block-end direction.
	/// </summary>
	public string BlockEnd => CssValues.BlockEnd;

	/// <summary>
	/// Gets the name of the <c>block-start</c> property. If applied to a block-level element or an inline float, behaves like inline-start. If applied to a page float, the float reference in which the page float is placed will be seen as full when determining whether it can host subsequent page floats that float in the block-start direction.
	/// </summary>
	public string BlockStart => CssValues.BlockStart;

	/// <summary>
	/// Gets the name of the <c>both</c> property. Behave like both-inline.
	/// </summary>
	public string Both => CssValues.Both;

	/// <summary>
	/// Gets the name of the <c>both-block</c> property. Behave like block-start and block-end.
	/// </summary>
	public string BothBlock => CssValues.BothBlock;

	/// <summary>
	/// Gets the name of the <c>both-inline</c> property. Behave like inline-start and inline-end.
	/// </summary>
	public string BothInline => CssValues.BothInline;

	/// <summary>
	/// Gets the name of the <c>bottom</c> property. Behave like block-end or inline-end depending on the float containing block’s direction and writing-mode.
	/// </summary>
	public string Bottom => CssValues.Bottom;

	/// <summary>
	/// Gets the name of the <c>inline-end</c> property. If applied to a block-level element or an inline float, requires that the block-start outer edge of the box comes after the block-end outer edge of any inline-end-floats with an inline-end-float-reference that resulted from elements earlier in the source document. If applied to a page float, the float reference in which the page float is placed will be seen as full when determining whether it can host subsequent page floats that float in the inline-end direction.
	/// </summary>
	public string InlineEnd => CssValues.InlineEnd;

	/// <summary>
	/// Gets the name of the <c>inline-start</c> property. If applied to an inline float, requires that the block-start outer edge of the box comes after the block-end outer edge of any inline-start-floats with an inline-start-float-reference that resulted from elements earlier in the source document. If applied to a page float, the float reference in which the page float is placed will be seen as full when determining whether it can host subsequent page floats that float in the inline-start direction.
	/// </summary>
	public string InlineStart => CssValues.InlineStart;

	/// <summary>
	/// Gets the name of the <c>left</c> property. Behave like block-end, inline-start or inline-end depending on the float containing block’s direction and writing-mode.
	/// </summary>
	public string Left => CssValues.Left;

	/// <summary>
	/// Gets the name of the <c>none</c> property. No constraint on the box’s position with respect to floats.
	/// </summary>
	public string None => CssValues.None;

	/// <summary>
	/// Gets the name of the <c>right</c> property. Behave like block-start, inline-start or inline-end depending on the float containing block’s direction and writing-mode.
	/// </summary>
	public string Right => CssValues.Right;

	/// <summary>
	/// Gets the name of the <c>top</c> property. Behave like block-start or inline-start depending on the float containing block’s direction and writing-mode.
	/// </summary>
	public string Top => CssValues.Top;

}