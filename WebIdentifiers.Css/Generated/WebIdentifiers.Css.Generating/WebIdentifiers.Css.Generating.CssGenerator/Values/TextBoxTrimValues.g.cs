// <autogenerated/>
#nullable enable
namespace WebIdentifiers.Css.Values;

/// <summary>
/// Provides values which are valid for the <c>text-box-trim</c> property.
/// </summary>
public partial class TextBoxTrimValues : PropertyValuesBase
{
	/// <summary>
	/// Gets the name of the <c>both</c> property. Specifies the behavior of start and end simultaneously.
	/// </summary>
	public string Both => CssValues.Both;

	/// <summary>
	/// Gets the name of the <c>end</c> property. For block containers: trim the block-end side of the last formatted line to the corresponding text-box-edge metric of its root inline box. If there is no such line, or if there is intervening non-zero padding or borders, there is no effect. For inline boxes: trims the block-end side of the box to match its content edge to the metric specified by text-box-edge (treating leading as text).
	/// </summary>
	public string End => CssValues.End;

	/// <summary>
	/// Gets the name of the <c>none</c> property. No special handling of the first/last line box when applied to a block container. When applied to an inline box, specifies that the over/under content edges coincide with the text-over/text-under baselines regardless of text-box-edge (which nonetheless still affects line box sizing).
	/// </summary>
	public string None => CssValues.None;

	/// <summary>
	/// Gets the name of the <c>start</c> property. For block containers: trim the block-start side of the first formatted line to the corresponding text-box-edge metric of its root inline box. If there is no such line, or if there is intervening non-zero padding or borders, there is no effect. For inline boxes: trims the block-start side of the box to match its content edge to the metric specified by text-box-edge (treating leading as text).
	/// </summary>
	public string Start => CssValues.Start;

}