// <autogenerated/>
#nullable enable
namespace WebIdentifiers.Css.Values;

/// <summary>
/// Provides values which are valid for the <c>rotate</c> property.
/// </summary>
public partial class RotateValues : PropertyValuesBase
{
	/// <summary>
	/// Gets the name of the <c>none</c> property. All three properties accept (and default to) the value none, which produces no transform at all. In particular, this value does not trigger the creation of a stacking context or containing block for all descendants, while all other values (including “identity” transforms like translate: 0px) create a stacking context and containing block for all descendants, per usual for transforms.
	/// </summary>
	public string None => CssValues.None;

	/// <summary>
	/// Gets the name of the <c>x</c> property. The axis can be specified with either the x, y, or z keywords, which specify a rotation around that axis, equivalent to the rotateX(), rotateY(), and rotateZ() transform functions. Alternately, the axis can be specified explicitly by giving three numbers representing the x, y, and z components of an origin-centered vector, equivalent to the rotate3d() function.
	/// </summary>
	public string X => CssValues.X;

	/// <summary>
	/// Gets the name of the <c>y</c> property. The axis can be specified with either the x, y, or z keywords, which specify a rotation around that axis, equivalent to the rotateX(), rotateY(), and rotateZ() transform functions. Alternately, the axis can be specified explicitly by giving three numbers representing the x, y, and z components of an origin-centered vector, equivalent to the rotate3d() function.
	/// </summary>
	public string Y => CssValues.Y;

	/// <summary>
	/// Gets the name of the <c>z</c> property. The axis can be specified with either the x, y, or z keywords, which specify a rotation around that axis, equivalent to the rotateX(), rotateY(), and rotateZ() transform functions. Alternately, the axis can be specified explicitly by giving three numbers representing the x, y, and z components of an origin-centered vector, equivalent to the rotate3d() function.
	/// </summary>
	public string Z => CssValues.Z;

}