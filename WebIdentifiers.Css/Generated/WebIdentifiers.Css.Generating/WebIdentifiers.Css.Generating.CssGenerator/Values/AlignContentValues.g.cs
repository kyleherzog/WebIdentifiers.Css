// <autogenerated/>
namespace WebIdentifiers.Css.Values;

public partial class AlignContentValues : PropertyValuesBase
{
	/// <summary>
	/// Gets the name of the <c>center</c> property. Lines are packed toward the center of the flex container. The lines in the flex container are placed flush with each other and aligned in the center of the flex container, with equal amounts of space between the cross-start content edge of the flex container and the first line in the flex container, and between the cross-end content edge of the flex container and the last line in the flex container. (If the leftover free-space is negative, the lines will overflow equally in both directions.)
	/// </summary>
	public string Center => CssValues.Center;

	/// <summary>
	/// Gets the name of the <c>flex-end</c> property. Lines are packed toward the end of the flex container. The cross-end edge of the last line is placed flush with the cross-end edge of the flex container, and each preceding line is placed flush with the subsequent line.
	/// </summary>
	public string FlexEnd => CssValues.FlexEnd;

	/// <summary>
	/// Gets the name of the <c>flex-start</c> property. Lines are packed toward the start of the flex container. The cross-start edge of the first line in the flex container is placed flush with the cross-start edge of the flex container, and each subsequent line is placed flush with the preceding line.
	/// </summary>
	public string FlexStart => CssValues.FlexStart;

	/// <summary>
	/// Gets the name of the <c>normal</c> property. Aligns the contents of the box as a whole (as the alignment subject) within the box itself (as the alignment container): along the inline/row/main axis of the box (for justify-content) or the block/column/cross axis of the box (for align-content). Values other than normal are defined in § 4 Alignment Keywords, above.
	/// </summary>
	public string Normal => CssValues.Normal;

	/// <summary>
	/// Gets the name of the <c>space-around</c> property. Lines are evenly distributed in the flex container, with half-size spaces on either end. If the leftover free-space is negative this value is identical to center. Otherwise, the lines in the flex container are distributed such that the spacing between any two adjacent lines is the same, and the spacing between the first/last lines and the flex container edges is half the size of the spacing between flex lines.
	/// </summary>
	public string SpaceAround => CssValues.SpaceAround;

	/// <summary>
	/// Gets the name of the <c>space-between</c> property. Lines are evenly distributed in the flex container. If the leftover free-space is negative or there is only a single flex line in the flex container, this value is identical to flex-start. Otherwise, the cross-start edge of the first line in the flex container is placed flush with the cross-start content edge of the flex container, the cross-end edge of the last line in the flex container is placed flush with the cross-end content edge of the flex container, and the remaining lines in the flex container are distributed so that the spacing between any two adjacent lines is the same.
	/// </summary>
	public string SpaceBetween => CssValues.SpaceBetween;

	/// <summary>
	/// Gets the name of the <c>stretch</c> property. Lines stretch to take up the remaining space. If the leftover free-space is negative, this value is identical to flex-start. Otherwise, the free-space is split equally between all of the lines, increasing their cross size.
	/// </summary>
	public string Stretch => CssValues.Stretch;

}