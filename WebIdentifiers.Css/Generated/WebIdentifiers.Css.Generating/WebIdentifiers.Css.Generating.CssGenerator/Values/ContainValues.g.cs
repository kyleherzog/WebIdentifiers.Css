// <autogenerated/>
#nullable enable
namespace WebIdentifiers.Css.Values;

/// <summary>
/// Provides values which are valid for the <c>contain</c> property.
/// </summary>
public partial class ContainValues : PropertyValuesBase
{
	/// <summary>
	/// Gets the name of the <c>content</c> property. This value computes to layout paint style, and thus turns on all forms of containment except size containment for the element.
	/// </summary>
	public string Content => CssValues.Content;

	/// <summary>
	/// Gets the name of the <c>inline-size</c> property. This value turns on inline-size containment for the element. This prevents the inline-size of its principal box from directly depending on its contents.
	/// </summary>
	public string InlineSize => CssValues.InlineSize;

	/// <summary>
	/// Gets the name of the <c>layout</c> property. This value turns on layout containment for the element. This ensures that the containment box is totally opaque for layout purposes; nothing outside can affect its internal layout, and vice versa.
	/// </summary>
	public string Layout => CssValues.Layout;

	/// <summary>
	/// Gets the name of the <c>none</c> property. This value indicates that the property has no effect. The element renders as normal, with no containment effects applied.
	/// </summary>
	public string None => CssValues.None;

	/// <summary>
	/// Gets the name of the <c>paint</c> property. This value turns on paint containment for the element. This ensures that the descendants of the containment box don’t display outside its bounds, so if an element is off-screen or otherwise not visible, its descendants are also guaranteed to be not visible.
	/// </summary>
	public string Paint => CssValues.Paint;

	/// <summary>
	/// Gets the name of the <c>size</c> property. The value turns on size containment for the element. This ensures that the containment box can be laid out without needing to examine its descendants.
	/// </summary>
	public string Size => CssValues.Size;

	/// <summary>
	/// Gets the name of the <c>strict</c> property. This value computes to size layout paint style, and thus turns on all forms of containment for the element.
	/// </summary>
	public string Strict => CssValues.Strict;

	/// <summary>
	/// Gets the name of the <c>style</c> property. This value turns on style containment for the element. This ensures that, for properties which can have effects on more than just an element and its descendants, those effects don’t escape the element.
	/// </summary>
	public string Style => CssValues.Style;

}