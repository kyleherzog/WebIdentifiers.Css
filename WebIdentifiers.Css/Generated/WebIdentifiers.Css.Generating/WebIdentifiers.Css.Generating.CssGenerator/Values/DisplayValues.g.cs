// <autogenerated/>
namespace WebIdentifiers.Css.Values;

public partial class DisplayValues : PropertyValuesBase
{
	/// <summary>
	/// Gets the name of the <c>block</c> property. This value causes an element to generate a block box.
	/// </summary>
	public string Block => CssValues.Block;

	/// <summary>
	/// Gets the name of the <c>inline-block</c> property. This value causes an element to generate an inline-level block container. The inside of an inline-block is formatted as a block box, and the element itself is formatted as an atomic inline-level box.
	/// </summary>
	public string InlineBlock => CssValues.InlineBlock;

	/// <summary>
	/// Gets the name of the <c>inline</c> property. This value causes an element to generate one or more inline boxes.
	/// </summary>
	public string Inline => CssValues.Inline;

	/// <summary>
	/// Gets the name of the <c>list-item</c> property. This value causes an element (e.g., LI in HTML) to generate a principal block box and a marker box. For information about lists and examples of list formatting, please consult the section on lists.
	/// </summary>
	public string ListItem => CssValues.ListItem;

	/// <summary>
	/// Gets the name of the <c>none</c> property. This value causes an element to not appear in the formatting structure (i.e., in visual media the element generates no boxes and has no effect on layout). Descendant elements do not generate any boxes either; the element and its content are removed from the formatting structure entirely. This behavior cannot be overridden by setting the display property on the descendants. Please note that a display of none does not create an invisible box; it creates no box at all. CSS includes mechanisms that enable an element to generate boxes in the formatting structure that affect formatting but are not visible themselves. Please consult the section on visibility for details.
	/// </summary>
	public string None => CssValues.None;

	/// <summary>
	/// Gets the name of the <c>table</c> property. These values cause an element to behave like a table element (subject to restrictions described in the chapter on tables).
	/// </summary>
	public string Table => CssValues.Table;

	/// <summary>
	/// Gets the name of the <c>inline-table</c> property. These values cause an element to behave like a table element (subject to restrictions described in the chapter on tables).
	/// </summary>
	public string InlineTable => CssValues.InlineTable;

	/// <summary>
	/// Gets the name of the <c>table-row-group</c> property. These values cause an element to behave like a table element (subject to restrictions described in the chapter on tables).
	/// </summary>
	public string TableRowGroup => CssValues.TableRowGroup;

	/// <summary>
	/// Gets the name of the <c>table-column</c> property. These values cause an element to behave like a table element (subject to restrictions described in the chapter on tables).
	/// </summary>
	public string TableColumn => CssValues.TableColumn;

	/// <summary>
	/// Gets the name of the <c>table-column-group</c> property. These values cause an element to behave like a table element (subject to restrictions described in the chapter on tables).
	/// </summary>
	public string TableColumnGroup => CssValues.TableColumnGroup;

	/// <summary>
	/// Gets the name of the <c>table-header-group</c> property. These values cause an element to behave like a table element (subject to restrictions described in the chapter on tables).
	/// </summary>
	public string TableHeaderGroup => CssValues.TableHeaderGroup;

	/// <summary>
	/// Gets the name of the <c>table-footer-group</c> property. These values cause an element to behave like a table element (subject to restrictions described in the chapter on tables).
	/// </summary>
	public string TableFooterGroup => CssValues.TableFooterGroup;

	/// <summary>
	/// Gets the name of the <c>table-row</c> property. These values cause an element to behave like a table element (subject to restrictions described in the chapter on tables).
	/// </summary>
	public string TableRow => CssValues.TableRow;

	/// <summary>
	/// Gets the name of the <c>table-cell</c> property. These values cause an element to behave like a table element (subject to restrictions described in the chapter on tables).
	/// </summary>
	public string TableCell => CssValues.TableCell;

	/// <summary>
	/// Gets the name of the <c>table-caption</c> property. These values cause an element to behave like a table element (subject to restrictions described in the chapter on tables).
	/// </summary>
	public string TableCaption => CssValues.TableCaption;

}