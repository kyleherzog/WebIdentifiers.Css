// <autogenerated/>
#nullable enable
namespace WebIdentifiers.Css.Values;

/// <summary>
/// Provides values which are valid for the <c>ruby-align</c> property.
/// </summary>
public partial class RubyAlignValues : PropertyValuesBase
{
	/// <summary>
	/// Gets the name of the <c>center</c> property. The ruby content is centered within its box. center ruby distribution
	/// </summary>
	public string Center => CssValues.Center;

	/// <summary>
	/// Gets the name of the <c>space-around</c> property. As for space-between except that there exists an extra justification opportunities whose space is distributed half before and half after the ruby content. space-around ruby distribution
	/// </summary>
	public string SpaceAround => CssValues.SpaceAround;

	/// <summary>
	/// Gets the name of the <c>space-between</c> property. The ruby content expands as defined for normal text justification (as defined by text-justify), except that if there are no justification opportunities the content is centered. space-between ruby distribution
	/// </summary>
	public string SpaceBetween => CssValues.SpaceBetween;

	/// <summary>
	/// Gets the name of the <c>start</c> property. The ruby content is aligned with the start edge of its box. start ruby distribution &quot;Katatsuki ruby&quot; (肩付きルビ) is close to, but not quite the same as, this start value. In particular, its behavior when overhanging its base can differ from start alignment depending on surrounding context, see JLREQ. Also, it’s only ever used in vertical writing, and the JLTF considers it not particularly important, so it may not be worth the effort to make this value smart enough to deal with katatsuki ruby. If start is needed for some other purpose, we should keep it. Otherwise, maybe just drop it?
	/// </summary>
	public string Start => CssValues.Start;

}