// <autogenerated/>
namespace WebIdentifiers.Css.Values;

public partial class JustifySelfValues : PropertyValuesBase
{
	/// <summary>
	/// Gets the name of the <c>anchor-center</c> property. The new anchor-center value makes this case extremely simple: if the positioned element has a default anchor element, then it is aligned so as to center itself over the default anchor element in the appropriate axis. If this alignment would cause it to overflow its inset-modified containing block in the appropriate axis, it instead is aligned flush with the side that it would have overflowed; if it would overflow both sides, it’s instead aligned as for start.
	/// </summary>
	public string AnchorCenter => CssValues.AnchorCenter;

	/// <summary>
	/// Gets the name of the <c>auto</c> property. Behaves as normal if the box has no parent, or when determining the actual position of an absolutely positioned box. It behaves as the computed justify-items value of the parent box (minus any legacy keywords) otherwise (including when determining the static position of an absolutely positioned box).
	/// </summary>
	public string Auto => CssValues.Auto;

	/// <summary>
	/// Gets the name of the <c>left</c> property. Aligns the alignment subject to be flush with the alignment container’s line-left or physical left edge, whichever is in the appropriate axis. If the property’s axis is not parallel with either left↔right axis, this value behaves as start. Currently, the only case where the property’s axis is not parallel with either left↔right axis is in a column flexbox.
	/// </summary>
	public string Left => CssValues.Left;

	/// <summary>
	/// Gets the name of the <c>normal</c> property. Represents the “default” alignment for the layout mode. Its behavior depends on the layout mode, as described below.
	/// </summary>
	public string Normal => CssValues.Normal;

	/// <summary>
	/// Gets the name of the <c>right</c> property. Aligns the alignment subject to be flush with the alignment container’s line-right or physical right edge, whichever is in the appropriate axis. If the property’s axis is not parallel with either left↔right axis, this value behaves as start. Currently, the only case where the property’s axis is not parallel with either left↔right axis is in a column flexbox.
	/// </summary>
	public string Right => CssValues.Right;

	/// <summary>
	/// Gets the name of the <c>stretch</c> property. When the box’s computed width/height (as appropriate to the axis) is auto and neither of its margins (in the appropriate axis) are auto, sets the box’s used size to the length necessary to make its outer size as close to filling the alignment container as possible while still respecting the constraints imposed by min-height/min-width/max-height/max-width. Unless otherwise specified, this value falls back to flex-start generally, and to self-start or self-end if the box has also specified first baseline or last baseline baseline content-alignment (respectively) in the same axis.
	/// </summary>
	public string Stretch => CssValues.Stretch;

}