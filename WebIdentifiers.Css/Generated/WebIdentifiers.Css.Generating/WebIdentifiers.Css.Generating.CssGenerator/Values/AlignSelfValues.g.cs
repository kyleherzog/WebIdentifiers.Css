// <autogenerated/>
namespace WebIdentifiers.Css.Values;

public partial class AlignSelfValues : PropertyValuesBase
{
	/// <summary>
	/// Gets the name of the <c>anchor-center</c> property. The new anchor-center value makes this case extremely simple: if the positioned element has a default anchor element, then it is aligned so as to center itself over the default anchor element in the appropriate axis. If this alignment would cause it to overflow its inset-modified containing block in the appropriate axis, it instead is aligned flush with the side that it would have overflowed; if it would overflow both sides, it’s instead aligned as for start.
	/// </summary>
	public string AnchorCenter => CssValues.AnchorCenter;

	/// <summary>
	/// Gets the name of the <c>auto</c> property. Behaves as normal if the box has no parent, or when determining the actual position of an absolutely positioned box. It behaves as the computed align-items value of the parent box (minus any legacy keywords) otherwise (including when determining the static position of an absolutely positioned box).
	/// </summary>
	public string Auto => CssValues.Auto;

	/// <summary>
	/// Gets the name of the <c>baseline</c> property. The flex item participates in baseline alignment: all participating flex items on the line are aligned such that their baselines align, and the item with the largest distance between its baseline and its cross-start margin edge is placed flush against the cross-start edge of the line. If the item does not have a baseline in the necessary axis, then one is synthesized from the flex item’s border box.
	/// </summary>
	public string Baseline => CssValues.Baseline;

	/// <summary>
	/// Gets the name of the <c>center</c> property. The flex item’s margin box is centered in the cross axis within the line. (If the cross size of the flex line is less than that of the flex item, it will overflow equally in both directions.)
	/// </summary>
	public string Center => CssValues.Center;

	/// <summary>
	/// Gets the name of the <c>flex-end</c> property. The cross-end margin edge of the flex item is placed flush with the cross-end edge of the line.
	/// </summary>
	public string FlexEnd => CssValues.FlexEnd;

	/// <summary>
	/// Gets the name of the <c>flex-start</c> property. The cross-start margin edge of the flex item is placed flush with the cross-start edge of the line.
	/// </summary>
	public string FlexStart => CssValues.FlexStart;

	/// <summary>
	/// Gets the name of the <c>normal</c> property. Represents the “default” alignment for the layout mode, as defined below.
	/// </summary>
	public string Normal => CssValues.Normal;

	/// <summary>
	/// Gets the name of the <c>stretch</c> property. As defined for justify-self in § 6.1 Inline-Axis (or Main-Axis) Alignment: the justify-self property.
	/// </summary>
	public string Stretch => CssValues.Stretch;

}