// <autogenerated/>
#nullable enable
namespace WebIdentifiers.Css.Values;

/// <summary>
/// Provides values which are valid for the <c>initial-letter-wrap</c> property.
/// </summary>
public partial class InitialLetterWrapValues : PropertyValuesBase
{
	/// <summary>
	/// Gets the name of the <c>all</c> property. For each line of text impacted by the initial letter, the line box adjacent to the initial letter starts at the start-most point that does not overlap the initial letter’s glyph outline. If the value of shape-outside is not none, shape-outside is used instead of the glyph outline. In both cases, shape-margin is applied to expand the outline, and the resulting outline is clipped by the initial letter’s margin edges.
	/// </summary>
	public string All => CssValues.All;

	/// <summary>
	/// Gets the name of the <c>first</c> property. Behaves as none if the first typographic character unit after the initial letter belongs to Unicode General Category Zs. Otherwise behaves as for all on the first line of the block containing the initial letter and as none on the rest. This example shows why contour-fitting the first line is necessary, and why it is dropped when the initial letter is followed by a space: In the top paragraph, the initial letter &quot;A&quot; has a word space after it: the gap between the top of the &quot;A&quot; and the next letter provides the necessary word separation. In the next paragraph, the initial letter &quot;A&quot; is part of the first word, and leaving a gap between the top of the &quot;A&quot; and the next letter would create a jarring visual break within the word. In this case, the first line of text should be kerned into the initial letter’s area, as shown in the bottom paragraph. Do we need an unconditional first? (I.e. Should we rename this value to auto and add a first value that does not check for spaces?) See GitHub issue 410
	/// </summary>
	public string First => CssValues.First;

	/// <summary>
	/// Gets the name of the <c>grid</c> property. This value is the same as none, except that the exclusion area of the impacted lines is increased as necessary for its end-edge to land on the character grid, i.e. to be a multiple of (1ic + letter-spacing) as computed on the containing block. The justify-self property can then be used to align the initial letter box within the exclusion area. Diagram of Japanese initial letter in vertical writing mode
	/// </summary>
	public string Grid => CssValues.Grid;

	/// <summary>
	/// Gets the name of the <c>none</c> property. No contour-fitting is performed: each impacted line is aligned flush to the inline-end margin edge of the initial letter.
	/// </summary>
	public string None => CssValues.None;

}