// <autogenerated/>
namespace WebIdentifiers.Css.Values;

public partial class PointerEventsValues : PropertyValuesBase
{
	/// <summary>
	/// Gets the name of the <c>auto</c> property. Hit-testing occurs normally.
	/// </summary>
	public string Auto => CssValues.Auto;

	/// <summary>
	/// Gets the name of the <c>none</c> property. Hit-testing acts as if the boxes generated by the element (see [CSS-DISPLAY-3]) were not there, effectively causing the element behind the pointer-events: none element to become the target of hit-testing based events instead. The statement above needs to be be qualified; for some purposes, hit-testing continues to take the element into account. For instance, clicking and dragging to start a text selection will continue to work as usual. What is the precise set of things for which hit-testing is affected by pointer-events?
	/// </summary>
	public string None => CssValues.None;

}