// <autogenerated/>
namespace WebIdentifiers.Css.Values;

public partial class SpeakAsValues : PropertyValuesBase
{
	/// <summary>
	/// Gets the name of the <c>digits</c> property. Speak numbers one digit at a time, for instance, “twelve” would be spoken as “one two”, and “31” as “three one”.
	/// </summary>
	public string Digits => CssValues.Digits;

	/// <summary>
	/// Gets the name of the <c>literal-punctuation</c> property. Punctuation such as semicolons, braces, and so on is named aloud (i.e. spoken literally) rather than rendered naturally as appropriate pauses.
	/// </summary>
	public string LiteralPunctuation => CssValues.LiteralPunctuation;

	/// <summary>
	/// Gets the name of the <c>no-punctuation</c> property. Punctuation is not rendered: neither spoken nor rendered as pauses.
	/// </summary>
	public string NoPunctuation => CssValues.NoPunctuation;

	/// <summary>
	/// Gets the name of the <c>normal</c> property. Uses language-dependent pronunciation rules for rendering the element’s content. For example, punctuation is not spoken as-is, but instead rendered naturally as appropriate pauses.
	/// </summary>
	public string Normal => CssValues.Normal;

	/// <summary>
	/// Gets the name of the <c>spell-out</c> property. Spells the text one letter at a time (useful for acronyms and abbreviations). In languages where accented characters are rare, it is permitted to drop accents in favor of alternative unaccented spellings. As an example, in English, the word “rôle” can also be written as “role”. A conforming implementation would thus be able to spell-out “rôle” as “R O L E”.
	/// </summary>
	public string SpellOut => CssValues.SpellOut;

}